#!/usr/bin/python

import itertools
import os
import re
import sys
import time

import vmu

BASE_IMAGE_PATH="/mnt/gluster/chtc/VMs"

def generate_dag_fragment(serial, combo):
    platform, sources, package_set = combo
    node_name = 'TestRun' + serial

    priority = 0
    if 'osg-tested-internal' in package_set.packages:
        priority = 1

    contents = '\n'
    contents += '# Node %s: %s - %s - %s\n' % (serial, platform, sources, ', '.join(package_set.packages))
    contents += 'JOB %s single-test-run.sub\n' % (node_name)
    contents += 'VARS %s serial="%s" platform="%s" jobpriority="%d"\n' % (node_name, serial, platform, priority)
    contents += 'SCRIPT POST %s process-job-output %s $JOBID\n' % (node_name, serial)
    contents += 'PRIORITY %s %d\n' % (node_name, priority)
    return contents

def write_osg_test_configuration(serial, combo, directory, nightly=False):
    _, sources, package_set = combo
    base_config = open('osg-test.conf', 'r')
    contents = base_config.read() + '\n' # ensure newline in case user forgets it
    base_config.close()

    sources_parts = vmu.parse_sources_spec(sources)
    testsrc, base_series, base_repos, update_series, update_repos = sources_parts

    def not_osg_release(repo): return repo != 'osg'

    if testsrc is not None:
        contents += 'testsource = %s\n' % testsrc
    # Remove osg production from any part of the extra repos string
    base_repos = filter(not_osg_release, base_repos)
    # Don't add any extra repos if there aren't any
    if base_repos:
        contents += 'extrarepos = %s\n' % ', '.join(base_repos)

    if update_repos:
        update_repos = filter(not_osg_release, update_repos)
        if update_series:
            contents += 'updaterelease = %s\n' % update_series
        contents += 'updaterepos = %s\n' % ', '.join(update_repos)

    contents += 'packages = %s\n' % (', '.join(package_set.packages))
    contents += 'series = %s\n' % base_series
    contents += 'sources = %s\n' % (sources)
    contents += 'selinux = %s\n' % package_set.selinux
    contents += 'nightly = %s\n' % nightly

    vmu.write_file(contents, os.path.join(directory, 'osg-test-%s.conf' % (serial)))


# ------------------------------------------------------------------------------
# MAIN
# ------------------------------------------------------------------------------

if __name__ == '__main__':

    # Define paths
    script_name = os.path.basename(sys.argv[0])

    # Process command-line arguments
    if len(sys.argv) != 2:
        vmu.die('usage: %s PARAMETER-DIR' % (script_name))
    param_dir = sys.argv[1]
    if not os.path.exists(param_dir):
        vmu.die('%s: parameter directory "%s" does not exist' % (script_name, param_dir))

    run_params = vmu.load_run_params(param_dir)
    vmu.flatten_run_params(run_params) # verify uniqueness of package sets + labels

    # Set up test run directory
    test_run_directory = os.getcwd()

    # Check if nightly
    with open('run_label', 'r') as f:
        nightly = f.read().strip() == 'nightly'

    # Start DAG file
    dag_contents = '# osg-test run generated %s\n' % (time.strftime('%Y-%m-%d %H:%M'))
    dag_contents += 'CONFIG inner-dag.config\n'

    # bail if there aren't corresponding VM images before writing any config
    for param_file in run_params:
        for platform in param_file['platforms']:
            image_path = os.path.join(BASE_IMAGE_PATH, platform + '_htcondor.dsk')
            if not os.path.exists(image_path):
                sys.exit("ERROR: Invalid platform (%s). Could not find %s" % (platform, image_path))

    # Run parameter sweep
    process = 0
    run_combos = [] # keep track of all combos to remove dupes
    for param_file in run_params:
        for combo in itertools.product(param_file['platforms'], param_file['sources'], param_file['package_sets']):
            if combo not in run_combos:
                run_combos.append(combo)
                serial = '%03d' % (process)
                dag_contents += generate_dag_fragment(serial, combo)
                write_osg_test_configuration(serial, combo, test_run_directory, nightly)
                process += 1

    dag_contents += '\n'
    dag_contents += '# Allow DAG to complete successfully if any tests have failed\n'
    dag_contents += 'FINAL MarkDagSuccessful true.sub\n'
    vmu.write_file(dag_contents, os.path.join(test_run_directory, 'test-run.dag'))
